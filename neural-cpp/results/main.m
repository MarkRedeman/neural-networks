addpath('./plot_functions');
addpath('./plot_functions/extract_fig');

for dimension = [10, 20];
    file_to_analyze = sprintf('v_3_experiment_%d.log', dimension);

    data = importdata(file_to_analyze);
    results = struct( ...
        'dimension', [], ...
        'sample_size', [], ...
        'alpha', [], ...
        'max_steps', [], ...
        'successions', [], ...
        'total_runs', [], ...
        'iterations', [] ...
    );

    results_size = 1;
    for idx = 1 : size(data, 1)
        % Skip if the same sample size was used
        if (idx > 1 && data(idx - 1, 2) == data(idx, 2))
            continue;
        end

        results(results_size) = struct( ...
            'dimension', data(idx, 1), ...
            'sample_size', data(idx, 2), ...
            'alpha', data(idx, 2) / data(idx, 1), ...
            'max_steps', data(idx, 3), ...
            'successions', data(idx, 4), ...
            'total_runs', data(idx, 5), ...
            'iterations', data(idx, 6:end) ...
        );
        results_size = results_size + 1;
    end

    iteration_statistics = struct( ...
        'alpha', [], ...
        'min', [], ...
        'max', [], ...
        'median', [], ...
        'mean', [], ...
        'variance', [] ...
    );

    for idx = 1 : size(results, 2)
        iterations = results(idx).iterations;
        iteration_statistics(idx) = struct( ...
            'alpha', results(idx).alpha, ...
            'min', min(iterations), ...
            'max', max(iterations), ...
            'median', median(iterations),  ...
            'mean', mean(iterations(find(iterations < results(idx).max_steps))), ...
            'variance', var(iterations(find(iterations < results(idx).max_steps))) ...
        );
    end

    % easy way of showing a table
    struct2table(iteration_statistics)

    fig = open_figure([], sprintf('Histogram of iterations for N = %d, alpha = %4.3f', results(1).dimension, results(20).alpha));
    % The histogram might be a bit hard to see since there
    % could be few runs with many iterations
    runs = results(20).iterations;
    runs = runs(find(runs < results(20).max_steps));
    h = histogram(runs);
    % set(gca,'XScale','log');
    h.NumBins = 250;
    xlabel('iterations');
    % close(fig);
    % If  a experiment took more runs than the provided max runs, assume that it did not converge
    iterations = reshape([results.iterations], [results(1).total_runs, size(results, 2)]);
    for idx = 1 : size(results, 2)
        max_steps = results(idx).max_steps;
        iterations(find(iterations(:, idx) >= max_steps), idx) = NaN;
    end

    compare_theoretical(results, iterations, unique([results(1).dimension 100, 500, 1000, 2500, 7500]))
    picture
end